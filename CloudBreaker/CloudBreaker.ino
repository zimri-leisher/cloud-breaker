#include <FastLED.h>
#include "Arduino.h"
//#include "Fire.h"
#define LED_PIN     7
#define LED_WIDTH 16
#define LED_HEIGHT 32
#define NUM_LEDS LED_WIDTH * LED_HEIGHT
#define IMAGE_WIDTH 8
#define IMAGE_HEIGHT 32

CRGB leds[NUM_LEDS];

const uint8_t PROGMEM
gamma8[] = {
0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

const uint8_t PROGMEM
colors[] = {
0x21, 0x62, 0xa4, 0x20, 0x61, 0xa3, 0x23, 0x63,
0xa3, 0x1d, 0x61, 0xa2, 0x1e, 0x5f, 0xa1, 0x1e,
0x61, 0xa2, 0x21, 0x61, 0xa1, 0x1f, 0x60, 0xa2,
0x20, 0x61, 0xa3, 0x1f, 0x60, 0xa2, 0x23, 0x62,
0xa5, 0x22, 0x61, 0xa4, 0x22, 0x63, 0xa5, 0x23,
0x63, 0xa3, 0x23, 0x62, 0xa3, 0x22, 0x62, 0xa2,
0x1e, 0x62, 0xa3, 0x20, 0x61, 0xa3, 0x1e, 0x62,
0xa3, 0x22, 0x63, 0xa3, 0x20, 0x64, 0xa5, 0x24,
0x65, 0xa5, 0x26, 0x66, 0xa4, 0x24, 0x65, 0xa5,
0x1d, 0x62, 0xa5, 0x22, 0x63, 0xa5, 0x22, 0x63,
0xa5, 0x21, 0x62, 0xa2, 0x20, 0x64, 0xa5, 0x1e,
0x63, 0xa4, 0x24, 0x65, 0xa5, 0x24, 0x66, 0xa3,
0x1a, 0x61, 0xa3, 0x1b, 0x60, 0xa3, 0x1d, 0x63,
0xa2, 0x21, 0x63, 0xa3, 0x1f, 0x63, 0xa4, 0x1f,
0x63, 0xa4, 0x21, 0x65, 0xa4, 0x21, 0x65, 0xa4,
0x19, 0x61, 0xa3, 0x1a, 0x61, 0xa3, 0x1a, 0x61,
0xa3, 0x1c, 0x61, 0xa2, 0x1c, 0x63, 0xa3, 0x1e,
0x61, 0xa2, 0x1e, 0x62, 0xa3, 0x20, 0x64, 0xa5,
0x17, 0x62, 0xa3, 0x1b, 0x62, 0xa4, 0x1a, 0x63,
0xa5, 0x1d, 0x62, 0xa3, 0x1b, 0x62, 0xa4, 0x1c,
0x63, 0xa5, 0x1c, 0x63, 0xa5, 0x1d, 0x62, 0xa3,
0x1a, 0x64, 0xa5, 0x19, 0x63, 0xa4, 0x1c, 0x63,
0xa5, 0x1b, 0x63, 0xa3, 0x1c, 0x63, 0xa5, 0x1e,
0x63, 0xa4, 0x1d, 0x62, 0xa5, 0x1e, 0x63, 0xa4,
0x1e, 0x64, 0xa7, 0x1b, 0x64, 0xa8, 0x1a, 0x63,
0xa7, 0x1e, 0x65, 0xa7, 0x1c, 0x63, 0xa5, 0x1e,
0x63, 0xa6, 0x1d, 0x64, 0xa6, 0x1e, 0x65, 0xa7,
0x1f, 0x66, 0xa8, 0x1d, 0x67, 0xa8, 0x1d, 0x67,
0xa8, 0x1f, 0x66, 0xa8, 0x1f, 0x66, 0xa8, 0x1f,
0x66, 0xa8, 0x1f, 0x66, 0xa8, 0x1f, 0x66, 0xa8,
0x1f, 0x69, 0xaa, 0x1e, 0x68, 0xa9, 0x20, 0x67,
0xa9, 0x21, 0x66, 0xa7, 0x20, 0x67, 0xa9, 0x1e,
0x68, 0xa9, 0x20, 0x67, 0xa9, 0x1e, 0x68, 0xa9,
0x21, 0x6a, 0xac, 0x20, 0x69, 0xad, 0x21, 0x6a,
0xab, 0x22, 0x69, 0xab, 0x20, 0x69, 0xaa, 0x1f,
0x69, 0xaa, 0x1f, 0x69, 0xaa, 0x1f, 0x69, 0xaa,
0x26, 0x6b, 0xae, 0x22, 0x6b, 0xaf, 0x22, 0x6b,
0xad, 0x20, 0x6b, 0xad, 0x20, 0x69, 0xac, 0x20,
0x6a, 0xab, 0x1f, 0x6a, 0xab, 0x25, 0x6b, 0xad,
0x2b, 0x72, 0xb2, 0x28, 0x6f, 0xb1, 0x24, 0x6d,
0xaf, 0x23, 0x6c, 0xb0, 0x22, 0x6d, 0xb0, 0x23,
0x6d, 0xae, 0x23, 0x6c, 0xad, 0x27, 0x6d, 0xad,
0xdc, 0xe8, 0xf1, 0x2c, 0x75, 0xbd, 0x2a, 0x73,
0xb3, 0x25, 0x70, 0xb1, 0x21, 0x6f, 0xaf, 0x24,
0x6f, 0xb0, 0x26, 0x70, 0xb1, 0x27, 0x70, 0xaf,
0xf3, 0xf1, 0xf0, 0xf0, 0xef, 0xed, 0x62, 0x88,
0xa9, 0x2a, 0x76, 0xb4, 0x26, 0x74, 0xb2, 0x24,
0x71, 0xb1, 0x25, 0x72, 0xb2, 0x27, 0x73, 0xb1,
0xf1, 0xf0, 0xed, 0xe3, 0xe3, 0xdf, 0xc9, 0xc9,
0xce, 0x2d, 0x78, 0xb3, 0x2c, 0x78, 0xb6, 0x27,
0x76, 0xb4, 0x25, 0x74, 0xb2, 0x26, 0x74, 0xb2,
0xda, 0xda, 0xdb, 0xd8, 0xd9, 0xd8, 0x4c, 0x88,
0xba, 0x2b, 0x79, 0xb7, 0x2a, 0x78, 0xb6, 0x29,
0x77, 0xb5, 0x2c, 0x77, 0xb6, 0x2c, 0x78, 0xb6,
0x77, 0x9b, 0xc4, 0x41, 0x82, 0xbc, 0x30, 0x7e,
0xb8, 0x2e, 0x7d, 0xb8, 0x2c, 0x7b, 0xb7, 0x2e,
0x7c, 0xb7, 0x2f, 0x7d, 0xb8, 0x34, 0x7d, 0xb9,
0x45, 0x87, 0xc1, 0x40, 0x85, 0xc0, 0x35, 0x81,
0xbb, 0x32, 0x7e, 0xba, 0x31, 0x80, 0xbb, 0x34,
0x7e, 0xbb, 0x36, 0x7f, 0xbb, 0xf4, 0xf0, 0xed,
0x4d, 0x8c, 0xc3, 0x44, 0x88, 0xc2, 0x3b, 0x84,
0xbf, 0x38, 0x81, 0xbe, 0x38, 0x82, 0xbd, 0x3a,
0x82, 0xbd, 0x3d, 0x83, 0xbf, 0xfb, 0xf2, 0xec,
0x4a, 0x8b, 0xc3, 0x4b, 0x8c, 0xc4, 0xc9, 0xdd,
0xf0, 0xea, 0xea, 0xe5, 0x4d, 0x89, 0xb2, 0xd2,
0xdf, 0xe9, 0xf7, 0xf6, 0xf4, 0xe3, 0xe3, 0xe1,
0x44, 0x8b, 0xc1, 0x4b, 0x8c, 0xc4, 0x50, 0x92,
0xca, 0xf6, 0xf4, 0xf3, 0xed, 0xec, 0xea, 0xef,
0xee, 0xec, 0xf6, 0xf5, 0xf3, 0xec, 0xeb, 0xe7,
0x46, 0x8b, 0xc4, 0x49, 0x8b, 0xc4, 0xf8, 0xf6,
0xf1, 0xf8, 0xf6, 0xf5, 0xee, 0xed, 0xeb, 0xe7,
0xe7, 0xe5, 0xe4, 0xe4, 0xe2, 0xe4, 0xe4, 0xe2,
0x45, 0x8b, 0xc5, 0x49, 0x8c, 0xc5, 0xf3, 0xf2,
0xf0, 0xf1, 0xf0, 0xee, 0xed, 0xec, 0xea, 0xe9,
0xe9, 0xe7, 0xe6, 0xe6, 0xe4, 0xde, 0xde, 0xdd,
0x54, 0x91, 0xc6, 0x51, 0x92, 0xc9, 0xe0, 0xe2,
0xea, 0xf4, 0xf2, 0xf0, 0xf4, 0xf3, 0xf1, 0xf6,
0xf4, 0xf3, 0xe2, 0xe0, 0xde, 0xde, 0xdf, 0xdc,
0xad, 0xb8, 0xc7, 0xb9, 0xbb, 0xca, 0xcd, 0xcd,
0xce, 0xcf, 0xd3, 0xd2, 0xeb, 0xea, 0xe7, 0xde,
0xdd, 0xd9, 0xc7, 0xc9, 0xcd, 0xdd, 0xdd, 0xdb,
0xd6, 0xd6, 0xd5, 0xc1, 0xc4, 0xc9, 0xaf, 0xb6,
0xbf, 0xc0, 0xc2, 0xc6, 0xcc, 0xd0, 0xcf, 0xc9,
0xca, 0xcc, 0xc6, 0xc6, 0xc8, 0xd0, 0xd0, 0xd2,
0xe9, 0xe8, 0xe4, 0xe8, 0xe8, 0xe0, 0xd7, 0xd8,
0xd4, 0xc2, 0xc4, 0xc6, 0xb9, 0xbf, 0xc3, 0xba,
0xbe, 0xc1, 0xbb, 0xbf, 0xc3, 0xbd, 0xbe, 0xc4,
0xee, 0xea, 0xe7, 0xe7, 0xe6, 0xe1, 0xe2, 0xdf,
0xda, 0xd6, 0xd4, 0xd1, 0xc9, 0xc9, 0xc7, 0xb7,
0xbb, 0xbe, 0xac, 0xb0, 0xb8, 0xac, 0xb0, 0xb9,
0xcc, 0xd0, 0xd5, 0xce, 0xd0, 0xd2, 0xd1, 0xcf,
0xce, 0xc6, 0xc6, 0xc4, 0xb7, 0xbb, 0xbc, 0xad,
0xb2, 0xb6, 0xa5, 0xa9, 0xb2, 0x9e, 0xa7, 0xb0,
0xd8, 0xd9, 0xd9, 0xc8, 0xcc, 0xcf, 0xca, 0xcc,
0xcd, 0xca, 0xcd, 0xcf, 0xbd, 0xc2, 0xc4, 0xbd,
0xc0, 0xc3, 0xb7, 0xba, 0xbf, 0xa9, 0xb0, 0xb7
};

int clamp(int val) {
    return clamp(val, 0, 255);
}

int clamp(int val, int min, int max) {
    if (val < min) {
        val = min;
    }
    if (val > max) {
        val = max;
    }
    return val;
}

long HSBtoRGB(float _hue, float _sat, float _brightness) {
    float red = 0.0;
    float green = 0.0;
    float blue = 0.0;

    if (_sat == 0.0) {
        red = _brightness;
        green = _brightness;
        blue = _brightness;
    } else {
        if (_hue == 360.0) {
            _hue = 0;
        }

        int slice = _hue / 60.0;
        float hue_frac = (_hue / 60.0) - slice;

        float aa = _brightness * (1.0 - _sat);
        float bb = _brightness * (1.0 - _sat * hue_frac);
        float cc = _brightness * (1.0 - _sat * (1.0 - hue_frac));

        switch (slice) {
            case 0:
                red = _brightness;
                green = cc;
                blue = aa;
                break;
            case 1:
                red = bb;
                green = _brightness;
                blue = aa;
                break;
            case 2:
                red = aa;
                green = _brightness;
                blue = cc;
                break;
            case 3:
                red = aa;
                green = bb;
                blue = _brightness;
                break;
            case 4:
                red = cc;
                green = aa;
                blue = _brightness;
                break;
            case 5:
                red = _brightness;
                green = aa;
                blue = bb;
                break;
            default:
                red = 0.0;
                green = 0.0;
                blue = 0.0;
                break;
        }
    }

    long ired = red * 255.0;
    long igreen = green * 255.0;
    long iblue = blue * 255.0;

    return long((ired << 16) | (igreen << 8) | (iblue));
}

void setup() {
    Serial.begin(9600);
    FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);//.setCorrection(0x9010FF); // 30 works for green
    FastLED.setBrightness(100);
}

int xOffset = 0;
int yOffset = 0;

void setPixel(int x, int y, int red, int green, int blue) {
    red = clamp(red);
    green = clamp(green);
    blue = clamp(blue);
    x = x % LED_WIDTH;
    y = y % LED_HEIGHT;
    if (y % 2 == 0) {
        // reverse every other row
        x = (LED_WIDTH - 1) - x;
    }
    leds[(x + y * LED_WIDTH)] = CRGB(pgm_read_byte(&gamma8[red]), pgm_read_byte(&gamma8[green]),
                                 pgm_read_byte(&gamma8[blue]));
}

void displayImage(bool scroll) {
    for (int x = 0; x < LED_WIDTH; x++) {
        for (int y = 0; y < LED_HEIGHT; y++) {
            int adjustedX = (x + xOffset) % IMAGE_WIDTH;
            int adjustedY = (y + yOffset) % IMAGE_HEIGHT;
            int idx = (x + y * LED_WIDTH) * 3;
            int red = pgm_read_byte(&colors[idx]);
            int blue = pgm_read_byte(&colors[idx + 1]);
            int green = pgm_read_byte(&colors[idx + 2]);
            if(blue > red + 35) {
                green -= 100;
            }
            setPixel(x, y, red, green, blue);
        }
    }
    FastLED.delay(800);
    if(scroll) {
        xOffset++;
    }
}

void displayFullscreenRainbowCycle(int colors, float saturation, float brightness, int d) {
    for (int i = 0; i < colors; i++) {
        float hue = (i / float(colors)) * 360; // Number between 0 and 360
        long color = HSBtoRGB(hue, saturation, brightness);

        // Get the red, blue and green parts from generated color
        int red = color >> 16 & 255;
        int green = color >> 8 & 255;
        int blue = color & 255;
//        Serial.print(red);
//        Serial.print(" ");
//        Serial.print(green);
//        Serial.print(" ");
//        Serial.println(blue);
        for (int x = 0; x < LED_WIDTH; x++) {
            for (int y = 0; y < LED_HEIGHT; y++) {
                setPixel(x, y, red, green, blue);
            }
        }
        FastLED.delay(d);

    }
}

void displayMovingRainbow(int colors, int speed, bool axis, float saturation, float brightness, int d) {

}

uint16_t XY(uint8_t X, uint8_t Y) {
    return (X * LED_WIDTH) + X;
}

void displayMovingStripsPattern() {
    const float hl = 6;
    int t = millis()/5;

    for (int i = 0; i <NUM_LEDS; i++)
    {
        int c = (abs(i - hl)/hl)*20;
        byte b = sin8(c+t/8);
        if ((b+t)%250<130)
            leds [i] = CRGB::Black;
        else
            leds [i] = ColorFromPalette(RainbowColors_p,(b+t)%250,255);
    }
    blur2d(leds, LED_WIDTH, LED_HEIGHT, 64);
}

void loop() {
//    random16_add_entropy(random());
//    // fastest update is about 30 ms
//    // displayFullscreenRainbowCycle(32, 1, 1, 50); // good values for a fast loop
//    Fire2012();
//    displayImage(true);
//    FastLED.show();
//    delay(1000/30);
    displayMovingStripsPattern();
}
